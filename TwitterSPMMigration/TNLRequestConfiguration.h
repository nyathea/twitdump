//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSArray, NSHTTPCookieStorage, NSString, NSURLCache, NSURLCredentialStorage;
@protocol TNLContentEncoder, TNLRequestRetryPolicyProvider;

@interface TNLRequestConfiguration : NSObject
{
    id <TNLRequestRetryPolicyProvider> _retryPolicyProvider;
    id <TNLContentEncoder> _contentEncoder;
    NSArray *_additionalContentDecoders;
    NSString *_sharedContainerIdentifier;
    NSURLCredentialStorage *_URLCredentialStorage;
    NSURLCache *_URLCache;
    NSHTTPCookieStorage *_cookieStorage;
    struct {
        unsigned int executionMode:8;
        unsigned int redirectPolicy:8;
        unsigned int responseDataConsumptionMode:8;
        unsigned int protocolOptions:8;
        unsigned int connectivityOptions:8;
        long long responseComputeHashAlgorithm;
        double idleTimeout;
        double attemptTimeout;
        double operationTimeout;
        double deferrableInterval;
        unsigned int cachePolicy:8;
        unsigned int networkServiceType:8;
        unsigned int cookieAcceptPolicy:4;
        unsigned int multipathServiceType:4;
        unsigned int contributeToExecutingNetworkConnectionsCount:1;
        unsigned int skipHostSanitization:1;
        unsigned int attestRequestPayload:1;
        unsigned int allowsCellularAccess:1;
        unsigned int discretionary:1;
        unsigned int shouldLaunchAppForBackgroundEvents:1;
        unsigned int shouldSetCookies:1;
        unsigned int shouldUseExtendedBackgroundIdleMode:1;
    } _ivars;
}

+ (id)configurationWithExpectedAnatomy:(long long)arg1;
+ (id)defaultConfiguration;
+ (id)configurationFromParameters:(id)arg1 executionMode:(long long)arg2 version:(id)arg3;
+ (id)configurationWithSessionConfiguration:(id)arg1;
+ (id)configurationForBackgroundRetriableRequest;
+ (id)configurationForBackgroundRetriableRequestWithTotalTimeout:(double)arg1;
+ (id)configurationForForegroundRetriableRequest;
+ (id)configurationForForegroundRetriableRequestWithTotalTimeout:(double)arg1;
+ (id)configurationForForegroundRetriableRequestWithTotalPermittedRetryCount:(unsigned long long)arg1;
+ (id)configurationForForegroundRetriableRequestWithTotalPermittedRetryCount:(unsigned long long)arg1 totalTimeout:(double)arg2;
+ (id)configurationWithServiceHTTPConfiguration:(id)arg1;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSHTTPCookieStorage *cookieStorage; // @synthesize cookieStorage=_cookieStorage;
@property(readonly, copy, nonatomic) NSString *sharedContainerIdentifier; // @synthesize sharedContainerIdentifier=_sharedContainerIdentifier;
@property(readonly, nonatomic) NSURLCache *URLCache; // @synthesize URLCache=_URLCache;
@property(readonly, nonatomic) NSURLCredentialStorage *URLCredentialStorage; // @synthesize URLCredentialStorage=_URLCredentialStorage;
@property(readonly, copy, nonatomic) NSArray *additionalContentDecoders; // @synthesize additionalContentDecoders=_additionalContentDecoders;
@property(readonly, nonatomic) id <TNLContentEncoder> contentEncoder; // @synthesize contentEncoder=_contentEncoder;
@property(readonly, nonatomic) id <TNLRequestRetryPolicyProvider> retryPolicyProvider; // @synthesize retryPolicyProvider=_retryPolicyProvider;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithIdleTimeout:(double)arg1 attemptTimeout:(double)arg2 operationTimeout:(double)arg3;
- (id)init;
- (id)initWithConfiguration:(id)arg1;
@property(readonly, nonatomic) _Bool shouldUseExtendedBackgroundIdleMode;
@property(readonly, nonatomic) long long multipathServiceType;
@property(readonly, nonatomic) _Bool shouldLaunchAppForBackgroundEvents;
@property(readonly, nonatomic, getter=isDiscretionary) _Bool discretionary;
@property(readonly, nonatomic) _Bool allowsCellularAccess;
@property(readonly, nonatomic) _Bool shouldSetCookies;
@property(readonly, nonatomic) unsigned long long cookieAcceptPolicy;
@property(readonly, nonatomic) unsigned long long networkServiceType;
@property(readonly, nonatomic) unsigned long long cachePolicy;
@property(readonly, nonatomic) double deferrableInterval;
@property(readonly, nonatomic) double operationTimeout;
@property(readonly, nonatomic) double attemptTimeout;
@property(readonly, nonatomic) double idleTimeout;
@property(readonly, nonatomic) long long responseComputeHashAlgorithm;
@property(readonly, nonatomic) _Bool attestRequestPayload;
@property(readonly, nonatomic) _Bool skipHostSanitization;
@property(readonly, nonatomic) _Bool contributeToExecutingNetworkConnectionsCount;
@property(readonly, nonatomic) long long connectivityOptions;
@property(readonly, nonatomic) long long protocolOptions;
@property(readonly, nonatomic) long long responseDataConsumptionMode;
@property(readonly, nonatomic) long long redirectPolicy;
@property(readonly, nonatomic) long long executionMode;
- (void)applySettingsToSessionConfiguration:(id)arg1;
- (id)generateCanonicalSessionConfigurationWithExecutionMode:(long long)arg1 identifier:(id)arg2 canonicalURLCache:(id)arg3 canonicalURLCredentialStorage:(id)arg4 canonicalCookieStorage:(id)arg5;
- (id)generateCanonicalSessionConfigurationWithExecutionMode:(long long)arg1 identifier:(id)arg2;
- (id)generateCanonicalSessionConfigurationWithExecutionMode:(long long)arg1;
- (id)generateCanonicalSessionConfigurationForBackgroundModeWithIdentifier:(id)arg1;
- (id)generateCanonicalSessionConfiguration;
- (id)initWithSessionConfiguration:(id)arg1;
- (id)updatedConfigurationWithHTTPRequestConfiguration:(id)arg1;

@end

