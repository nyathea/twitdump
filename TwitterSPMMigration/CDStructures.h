//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class LHLS1PlayerClientBridge, LHLSPlayerClientBridge;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AVCC {
    unsigned long long _lengthSize;
    unsigned long long _firstSPSSize;
    unsigned long long _firstPPSSize;
    char *_firstSPS;
    char *_firstPPS;
};

struct AsyncValueBase;

struct AudioRenderer;

struct BackRefFromAssociatedObject {
    union {
        struct {
            struct ObjHeader *obj_;
            struct ForeignRefManager *context_;
            int refCount;
        } ;
        struct {
            struct RawSpecialRef *ref_;
            struct ManuallyScoped<kotlin::RWSpinLock<MutexThreadStateHandling::kIgnore>, false> deallocMutex_;
        } ;
        struct ObjHeader *permanentObj_;
    } ;
};

struct CATransform3D {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
};

struct CCPacket {
    int _seq;
    int _expectedLength;
    struct fixed_array<unsigned char> _payload;
};

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGColorSpace;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CLLocationCoordinate2D {
    double latitude;
    double longitude;
};

struct CallbackDispatcher<LHLS::Network::RequestListener *> {
    struct weak_ptr<LHLS::CallbackLinkBase> _field1;
    struct RequestListener *_field2;
};

struct CallbackLink {
    struct shared_ptr<LHLS::CallbackLinkBase> _base;
};

struct CallbackLinkBase;

struct CaptionDelegate;

struct CaptionFormatter708 {
    CDUnknownFunctionPointerType *_vptr$SBParserDelegate;
    struct ServiceBlockParser _parser;
    struct CaptionWindow _windows[8];
    int _current;
    int _msecsDelay;
};

struct CaptionParser {
    struct CaptionDelegate *_delegate;
    struct CaptionParser608 _parser608;
    struct CaptionParser708 _parser708;
    _Bool _error;
    _Bool _use608;
    _Bool _force608;
};

struct CaptionParser608 {
    struct CaptionDelegate *_delegate;
    _Bool _error;
    struct Dictionary _attributes;
    int _row;
    int _col;
    struct list<LHLS::v1::AttributedText, std::allocator<LHLS::v1::AttributedText>> _display;
    struct list<LHLS::v1::AttributedText, std::allocator<LHLS::v1::AttributedText>> _compose;
    int _mode;
    int _max_rollup;
    int _rollupBaseRow;
    int _rollupBaseColumn;
    _Bool _needsUpdate;
    double _lastPTS;
};

struct CaptionParser708 {
    struct CaptionDelegate *_delegate;
    struct ServiceBlockQueue _formatterQueue;
    struct CCPacket _packet;
    int _activeService;
    double _pts;
};

struct CaptionWindow {
    _Bool _enabled;
    _Bool _visible;
    struct fixed_array<unsigned char> _params;
    _Bool _needsUpdate;
    int _cxScreen;
    int _cyScreen;
    int _rows;
    int _cols;
    int _priority;
    _Bool _relative;
    int _anchor;
    int _xpos;
    int _ypos;
    int _justify;
    int _printDirection;
    int _scrollDirection;
    int _displayEffect;
    int _effectDirection;
    int _msEffectSpeed;
    unsigned int _fillColour;
    unsigned int _borderColour;
    int _fillOpacity;
    int _fontSize;
    int _fontStyle;
    int _textTag;
    int _fontVerticalOffset;
    _Bool _italic;
    _Bool _underlined;
    int _penForegroundOpacity;
    unsigned int _penForegroundColour;
    int _penBackgroundOpacity;
    unsigned int _penBackgroundColour;
    unsigned int _penEdgeColour;
    int _penx;
    int _peny;
    struct Dictionary _attributes;
    struct list<LHLS::v1::AttributedText, std::allocator<LHLS::v1::AttributedText>> _textLines;
};

struct Clock;

struct Color {
    double r;
    double g;
    double b;
    double a;
};

struct Condition {
    struct _opaque_pthread_cond_t {
        long long __sig;
        char __opaque[40];
    } _cond;
};

struct CoreGraphicsRenderer {
    struct Document *m_document;
    struct unordered_map<tvg::Path *, const CGPath *, std::hash<tvg::Path *>, std::equal_to<tvg::Path *>, std::allocator<std::pair<tvg::Path *const, const CGPath *>>> m_cgPathCache;
    struct unordered_map<const tvg::Element *, const CGPath *, std::hash<const tvg::Element *>, std::equal_to<const tvg::Element *>, std::allocator<std::pair<const tvg::Element *const, const CGPath *>>> m_cgElementPathCache;
    struct unordered_map<const tvg::Gradient *, CGGradient *, std::hash<const tvg::Gradient *>, std::equal_to<const tvg::Gradient *>, std::allocator<std::pair<const tvg::Gradient *const, CGGradient *>>> m_cgGradientCache;
    struct CGColorSpace *m_colorSpace;
    struct RenderingStack m_renderingState;
    _Bool m_debugRendering;
};

struct Dictionary {
    struct map<std::string, LHLS::DictionaryValue, std::less<std::string>, std::allocator<std::pair<const std::string, LHLS::DictionaryValue>>> _map;
};

struct Document;

struct EventCollection {
    struct list<const LHLS::SubEvent *, std::allocator<const LHLS::SubEvent *>> _events;
    struct Condition _cond;
    struct Mutex _mutex;
};

struct FIRCLSMachOFile {
    int fd;
    unsigned long long mappedSize;
    void *mappedFile;
};

struct FIRCLSMachOSlice {
    void *startAddress;
    int cputype;
    int cpusubtype;
};

struct ForeignRefManager;

struct GULReachabilityApi {
    CDUnknownFunctionPointerType _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
};

struct InstallWPServiceEndpointListener;

struct InstallWPStateListener {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct KRefSharedHolder {
    struct ObjHeader *obj_;
    union {
        struct ForeignRefManager *context_;
        struct RawSpecialRef *ref_;
    } ;
};

struct Log;

struct MTLResourceID {
    unsigned long long _field1;
};

struct ManuallyScoped<kotlin::RWSpinLock<MutexThreadStateHandling::kIgnore>, false> {
    char implStorage_[8];
};

struct Mutex {
    struct _opaque_pthread_mutex_t _mutex;
    struct _opaque_pthread_t *_owner;
};

struct NSDirectionalEdgeInsets {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct NTPTimer {
    CDUnknownFunctionPointerType *_vptr$NTPTimer;
    struct Mutex _mutex;
    double _remoteNTP;
    double _remotePTS;
    unsigned long long _ntp;
};

struct ObjHeader {
    struct TypeInfo *_field1;
};

struct POCState {
    struct SeqParamSet _sps;
    int _prevPOCLSB;
    int _prevPOCMSB;
    _Bool _deltaPresent;
};

struct Playback;

struct PlaybackCallback;

struct PlaybackClock {
    CDUnknownFunctionPointerType *_vptr$Clock;
    struct Clock *_audioClock;
    struct Timer *_timer;
    _Bool _canStart;
    double _lastReportedPTS;
    double _firstVideoPTS;
    _Bool _hasValidVideoPTS;
    struct mutex _audioClockMutex;
};

struct PlaybackMetrics {
    basic_string_0f0f2d4a variantURL;
    double variantIndicatedBitrate;
    double variantObservedBitrate;
    double variantAverageAudioBitrate;
    double variantAverageVideoBitrate;
    double sessionTransferDuration;
    double sessionBytesTransferred;
    int sessionMediaRequestsWWAN;
    int sessionMediaRequestsWIFI;
    int sessionDroppedFrames;
};

struct PlayerClient {
    CDUnknownFunctionPointerType *_vptr$Object;
    CDUnknownFunctionPointerType *_vptr$StatsDelegate;
    CDUnknownFunctionPointerType *_vptr$AudioRendererDelegate;
    struct weak_ptr<LHLS::v1::PlaybackCallback> __weak_this_;
    struct PlayerDataDelegate *_playerDataDelegate;
    struct Playback *_player;
    struct unique_ptr<LHLS::v1::AudioRenderer, std::default_delete<LHLS::v1::AudioRenderer>> _audioRenderer;
    basic_string_0f0f2d4a _url;
    _Bool _isLive;
    _Bool _jsonMetadataReceived;
    struct TimedList<double> _timedRotations;
    struct multimap<const double, const LHLS::v1::ID3::Tag, std::less<const double>, std::allocator<std::pair<const double, const LHLS::v1::ID3::Tag>>> _timedID3Tags;
    struct recursive_mutex _timedID3TagsMutex;
    struct Timer _masterTimer;
    struct PlaybackClock _masterClock;
    struct StdDevStats _downloadRate;
    struct StdDevStats _downloadRatio;
    struct StdDevStats _networkLatency;
    struct NTPTimer _ntpClock;
    struct StdDevStats _latencyAve;
    struct StdDevStats _bitrateAve;
    double _lastBitrate;
    double _lastBitrateReportTime;
    _Bool _didReportBitrate;
    double _recentLatency;
    double _timeLastReportedLatency;
    _Bool _isTranscoded;
    _Bool _muted;
    float _volume;
    double _downlinkJitter;
    double _minBuffer;
    double _maxBuffer;
    double _constantBuffer;
    int _maxBitrate;
    int _maxWidth;
    int _maxHeight;
    basic_string_0f0f2d4a _renditionLang;
    basic_string_0f0f2d4a _renditionName;
    struct Mutex _mtxStart;
    _Bool _started;
    _Bool _explicitPause;
    double _remainingDuration;
    _Bool _hasSignalledReady;
    _Bool _mediaIsPlaying;
    _Bool _hasSeenTimeMapping;
    _Bool _disableInbandNTP;
    int _currentWidth;
    int _currentHeight;
};

struct PlayerClientBridge {
    CDUnknownFunctionPointerType *_vptr$PlayerClientListener;
    LHLSPlayerClientBridge *_lhlsPlayerClientBridge;
    struct CallbackLink _link;
};

struct PlayerClientStatus {
    struct PlaybackMetrics _metrics;
    struct optional<std::chrono::time_point<LHLS::NTPClock, std::chrono::duration<double>>> _currentNTP;
    struct optional<std::chrono::time_point<LHLS::MediaClock>> _currentMediaTime;
    struct duration<double, std::ratio<1>> _duration;
    _Bool _isCued;
};

struct PlayerDataDelegate;

struct PlayerDataDelegateImpl {
    CDUnknownFunctionPointerType *_vptr$PlayerDataDelegate;
    CDUnknownFunctionPointerType *_vptr$CaptionDelegate;
    LHLS1PlayerClientBridge *_playerClientBridge;
};

struct RawSpecialRef;

struct RenderingStack {
    struct vector<tvg::RenderingState, std::allocator<tvg::RenderingState>> m_renderingStack;
};

struct RenderingState;

struct Request;

struct RequestLUT;

struct RequestListener {
    CDUnknownFunctionPointerType *_field1;
};

struct SBParserDelegate;

struct SeqParamSet {
    int _profile;
    int _level;
    int _pictureWidth;
    int _pictureHeight;
    int _cropLeft;
    int _cropRight;
    int _cropTop;
    int _cropBottom;
    int _frameNumBitDepth;
    int _pocType;
    int _log2MaxPOCLSB;
    unsigned char _constraintSetFlags;
    _Bool _hasCrop;
    _Bool _frameMacroblocksOnly;
};

struct ServiceBlockParser {
    struct SBParserDelegate *_delegate;
};

struct ServiceBlockQueue {
    CDUnknownFunctionPointerType *_vptr$SBParserDelegate;
    CDUnknownFunctionPointerType *_vptr$Thread;
    struct _opaque_pthread_t *_thread;
    struct Mutex _threadMutex;
    struct EventCollection _collection;
    struct SubEvent *_exitEvent;
    struct optional<LHLS::iOSAutoreleasePool> _iosAutoreleasePool;
    struct CaptionFormatter708 _formatter;
    struct ServiceBlockParser _parser;
    struct CaptionDelegate *_delegate;
    struct Mutex _mutex;
    struct SubEvent *_evQueue;
    struct list<LHLS::v1::ServiceBlockItem, std::allocator<LHLS::v1::ServiceBlockItem>> _sbqueue;
    _Bool _seenDLC;
    _Bool _paused;
    double _pauseEnd;
    int _cxScreen;
    int _cyScreen;
};

struct SimplePlayerStatus {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    _Bool _field4;
    double _field5;
    struct _SimplePlayerStatus__isset _field6;
};

struct StdDevStats {
    int _count;
    double _min;
    double _max;
    double _sum;
    double _sumSquares;
    double _latest;
};

struct SubEvent;

struct SyncValue<LHLS::PlayerClient> {
    struct shared_ptr<LHLS::AsyncValueBase> _base;
    struct CallbackLink _link;
};

struct TNLBackoffBehavior_T {
    double _field1;
    double _field2;
    double _field3;
};

struct TPXPoint3D {
    double _field1;
    double _field2;
    double _field3;
};

struct TVGDocumentState {
    struct unique_ptr<tvg::Document, std::default_delete<tvg::Document>> m_document;
    struct CoreGraphicsRenderer m_renderer;
    struct unique_ptr<tvg::Log, std::default_delete<tvg::Log>> m_log;
};

struct TVGImageCacheKeyImpl {
    unsigned long long urlHash;
    struct CGSize imageSize;
    double scale;
    struct Color fillColor;
};

struct TimedList<double> {
    struct Mutex _mutex;
    struct list<double, std::allocator<double>> _times;
    struct list<double, std::allocator<double>> _values;
    double _default;
};

struct Timer {
    CDUnknownFunctionPointerType *_vptr$Timer;
    double _startTime;
};

struct TypeInfo;

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct UIOffset {
    double horizontal;
    double vertical;
};

struct WPServiceEndpointListener;

struct WPStateListener {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct WhisperPlay {
    CDUnknownFunctionPointerType *_field1;
};

struct _NOZCentralDirectoryFileRecordT {
    unsigned short versionMadeBy;
    struct _NOZLocalFileHeaderT *fileHeader;
    unsigned short commentSize;
    unsigned short fileStartDiskNumber;
    unsigned short internalFileAttributes;
    unsigned int externalFileAttributes;
    unsigned int localFileHeaderOffsetFromStartOfDisk;
};

struct _NOZEndOfCentralDirectoryRecordT {
    unsigned short diskNumber;
    unsigned short startDiskNumber;
    unsigned short recordCountForDisk;
    unsigned short totalRecordCount;
    unsigned int centralDirectorySize;
    unsigned int archiveStartToCentralDirectoryStartOffset;
    unsigned short commentSize;
};

struct _NOZFileEntryT {
    struct _NOZLocalFileDescriptorT fileDescriptor;
    struct _NOZLocalFileHeaderT fileHeader;
    struct _NOZCentralDirectoryFileRecordT centralDirectoryRecord;
    char *name;
    char *extraField;
    char *comment;
    struct _NOZFileEntryT *nextEntry;
    unsigned int ownsName:1;
    unsigned int ownsExtraField:1;
    unsigned int ownsComment:1;
};

struct _NOZLocalFileDescriptorT {
    unsigned int crc32;
    unsigned int compressedSize;
    unsigned int uncompressedSize;
};

struct _NOZLocalFileHeaderT {
    unsigned short versionForExtraction;
    unsigned short bitFlag;
    unsigned short compressionMethod;
    unsigned short dosTime;
    unsigned short dosDate;
    struct _NOZLocalFileDescriptorT *fileDescriptor;
    unsigned short nameSize;
    unsigned short extraFieldSize;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct _SimplePlayerStatus__isset {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
};

struct __long {
    char *__data_;
    unsigned long long __size_;
    unsigned int __cap_:63;
    unsigned int __is_long_:1;
};

struct __raw {
    unsigned long long __words[3];
};

struct __sFILE {
    char *_field1;
    int _field2;
    int _field3;
    short _field4;
    short _field5;
    struct __sbuf _field6;
    int _field7;
    void *_field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    struct __sbuf _field13;
    struct __sFILEX *_field14;
    int _field15;
    unsigned char _field16[3];
    unsigned char _field17[1];
    struct __sbuf _field18;
    int _field19;
    long long _field20;
};

struct __sbuf {
    char *_field1;
    int _field2;
};

struct __shared_weak_count;

struct __short {
    char __data_[23];
    unsigned char __padding_[0];
    unsigned int __size_:7;
    unsigned int __is_long_:1;
};

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct _google_crashlytics_FilesPayload {
    unsigned int files_count;
    struct _google_crashlytics_FilesPayload_File *files;
};

struct _google_crashlytics_Report {
    struct pb_bytes_array_s *sdk_version;
    struct pb_bytes_array_s *gmp_app_id;
    int platform;
    struct pb_bytes_array_s *installation_uuid;
    struct pb_bytes_array_s *build_version;
    struct pb_bytes_array_s *display_version;
    struct _google_crashlytics_FilesPayload apple_payload;
    struct pb_bytes_array_s *firebase_installation_id;
    struct pb_bytes_array_s *app_quality_session_id;
    struct pb_bytes_array_s *firebase_authentication_token;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct _opaque_pthread_t;

struct _xmlNode {
    void *_field1;
    int _field2;
    char *_field3;
    struct _xmlNode *_field4;
    struct _xmlNode *_field5;
    struct _xmlNode *_field6;
    struct _xmlNode *_field7;
    struct _xmlNode *_field8;
    struct _xmlDoc *_field9;
    struct _xmlNs *_field10;
    char *_field11;
    struct _xmlAttr *_field12;
    struct _xmlNs *_field13;
    void *_field14;
    unsigned short _field15;
    unsigned short _field16;
};

struct _xmlNs;

struct addrinfo {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    unsigned int _field5;
    char *_field6;
    struct sockaddr *_field7;
    struct addrinfo *_field8;
};

struct atomic_flag {
    _Atomic _Bool _Value;
};

struct duration<double, std::ratio<1>> {
    double __rep_;
};

struct fixed_array<unsigned char> {
    CDUnknownFunctionPointerType *_vptr$fixed_array;
    struct vector<unsigned char, std::allocator<unsigned char>> _items;
    int _offset;
};

struct function<std::unique_ptr<LHLS::Network::Request>(const char *, LHLS::CallbackDispatcher<LHLS::Network::RequestListener *>)> {
    struct __value_func<std::unique_ptr<LHLS::Network::Request>(const char *, LHLS::CallbackDispatcher<LHLS::Network::RequestListener *>)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<std::unique_ptr<LHLS::v1::Network::Request>(const char *, LHLS::v1::Network::RequestListener *)> {
    struct __value_func<std::unique_ptr<LHLS::v1::Network::Request>(const char *, LHLS::v1::Network::RequestListener *)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct iOSAutoreleasePool {
    void *_nsAutoreleasePool;
};

struct internal_state;

struct list<LHLS::v1::AttributedText, std::allocator<LHLS::v1::AttributedText>> {
    struct __list_node_base<LHLS::v1::AttributedText, void *> {
        void *__prev_;
        void *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::allocator<std::__list_node<LHLS::v1::AttributedText, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct list<LHLS::v1::ServiceBlockItem, std::allocator<LHLS::v1::ServiceBlockItem>> {
    struct __list_node_base<LHLS::v1::ServiceBlockItem, void *> {
        void *__prev_;
        void *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::allocator<std::__list_node<LHLS::v1::ServiceBlockItem, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct list<const LHLS::SubEvent *, std::allocator<const LHLS::SubEvent *>> {
    struct __list_node_base<const LHLS::SubEvent *, void *> {
        void *__prev_;
        void *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::allocator<std::__list_node<const LHLS::SubEvent *, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct list<double, std::allocator<double>> {
    struct __list_node_base<double, void *> {
        void *__prev_;
        void *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::allocator<std::__list_node<double, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct mach_timebase_info {
    unsigned int _field1;
    unsigned int _field2;
};

struct map<std::string, LHLS::DictionaryValue, std::less<std::string>, std::allocator<std::pair<const std::string, LHLS::DictionaryValue>>> {
    struct __tree<std::__value_type<std::string, LHLS::DictionaryValue>, std::__map_value_compare<std::string, std::__value_type<std::string, LHLS::DictionaryValue>, std::less<std::string>>, std::allocator<std::__value_type<std::string, LHLS::DictionaryValue>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, LHLS::DictionaryValue>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, LHLS::DictionaryValue>, std::less<std::string>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct multimap<const double, const LHLS::v1::ID3::Tag, std::less<const double>, std::allocator<std::pair<const double, const LHLS::v1::ID3::Tag>>> {
    struct __tree<std::__value_type<const double, const LHLS::v1::ID3::Tag>, std::__map_value_compare<const double, std::__value_type<const double, const LHLS::v1::ID3::Tag>, std::less<const double>>, std::allocator<std::__value_type<const double, const LHLS::v1::ID3::Tag>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<const double, const LHLS::v1::ID3::Tag>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<const double, std::__value_type<const double, const LHLS::v1::ID3::Tag>, std::less<const double>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct optional<(anonymous namespace)::PlayerDataDelegateImpl> {
    union {
        char __null_state_;
        struct PlayerDataDelegateImpl __val_;
    } ;
    _Bool __engaged_;
};

struct optional<LHLS::iOSAutoreleasePool> {
    union {
        char __null_state_;
        struct iOSAutoreleasePool __val_;
    } ;
    _Bool __engaged_;
};

struct optional<LHLS::v1::CaptionParser> {
    union {
        char __null_state_;
        struct CaptionParser __val_;
    } ;
    _Bool __engaged_;
};

struct optional<LHLS::v1::PlayerClient> {
    union {
        char __null_state_;
        struct PlayerClient __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::chrono::time_point<LHLS::MediaClock>> {
    union {
        char __null_state_;
        struct time_point<LHLS::MediaClock, std::chrono::duration<double>> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::chrono::time_point<LHLS::NTPClock, std::chrono::duration<double>>> {
    union {
        char __null_state_;
        struct time_point<LHLS::NTPClock, std::chrono::duration<double>> __val_;
    } ;
    _Bool __engaged_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct pb_bytes_array_s;

struct recursive_mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct shared_count {
    struct sp_counted_base *pi_;
};

struct shared_ptr<InstallWPServiceEndpointListener> {
    struct InstallWPServiceEndpointListener *px;
    struct shared_count pn;
};

struct shared_ptr<LHLS::AsyncValueBase> {
    struct AsyncValueBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<LHLS::CallbackLinkBase> {
    struct CallbackLinkBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<LHLS::Network::RequestLUT> {
    struct RequestLUT *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<LHLS::v1::Network::RequestLUT> {
    struct RequestLUT *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<WPServiceEndpointListener> {
    struct WPServiceEndpointListener *px;
    struct shared_count pn;
};

struct sockaddr {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[14];
};

struct sp_counted_base;

struct time_point<LHLS::MediaClock, std::chrono::duration<double>> {
    struct duration<double, std::ratio<1>> __d_;
};

struct time_point<LHLS::NTPClock, std::chrono::duration<double>> {
    struct duration<double, std::ratio<1>> __d_;
};

struct type {
    unsigned char __lx[24];
};

struct unique_ptr<LHLS::Network::Request, std::default_delete<LHLS::Network::Request>> {
    struct __compressed_pair<LHLS::Network::Request *, std::default_delete<LHLS::Network::Request>> {
        struct Request *_field1;
    } _field1;
};

struct unique_ptr<LHLS::v1::AudioRenderer, std::default_delete<LHLS::v1::AudioRenderer>> {
    struct __compressed_pair<LHLS::v1::AudioRenderer *, std::default_delete<LHLS::v1::AudioRenderer>> {
        struct AudioRenderer *__value_;
    } __ptr_;
};

struct unique_ptr<LHLS::v1::Network::Request, std::default_delete<LHLS::v1::Network::Request>> {
    struct __compressed_pair<LHLS::v1::Network::Request *, std::default_delete<LHLS::v1::Network::Request>> {
        struct Request *_field1;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Element *, const CGPath *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Element *, const CGPath *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Element *, const CGPath *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Element *, const CGPath *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Element *, const CGPath *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Element *, const CGPath *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<tvg::Path *, const CGPath *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<tvg::Path *, const CGPath *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<tvg::Path *, const CGPath *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<tvg::Path *, const CGPath *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<tvg::Path *, const CGPath *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<tvg::Path *, const CGPath *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<tvg::Document, std::default_delete<tvg::Document>> {
    struct __compressed_pair<tvg::Document *, std::default_delete<tvg::Document>> {
        struct Document *__value_;
    } __ptr_;
};

struct unique_ptr<tvg::Log, std::default_delete<tvg::Log>> {
    struct __compressed_pair<tvg::Log *, std::default_delete<tvg::Log>> {
        struct Log *__value_;
    } __ptr_;
};

struct unordered_map<const tvg::Element *, const CGPath *, std::hash<const tvg::Element *>, std::equal_to<const tvg::Element *>, std::allocator<std::pair<const tvg::Element *const, const CGPath *>>> {
    struct __hash_table<std::__hash_value_type<const tvg::Element *, const CGPath *>, std::__unordered_map_hasher<const tvg::Element *, std::__hash_value_type<const tvg::Element *, const CGPath *>, std::hash<const tvg::Element *>, std::equal_to<const tvg::Element *>>, std::__unordered_map_equal<const tvg::Element *, std::__hash_value_type<const tvg::Element *, const CGPath *>, std::equal_to<const tvg::Element *>, std::hash<const tvg::Element *>>, std::allocator<std::__hash_value_type<const tvg::Element *, const CGPath *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Element *, const CGPath *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Element *, const CGPath *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Element *, const CGPath *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const tvg::Element *, const CGPath *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Element *, const CGPath *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const tvg::Element *, std::__hash_value_type<const tvg::Element *, const CGPath *>, std::hash<const tvg::Element *>, std::equal_to<const tvg::Element *>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const tvg::Element *, std::__hash_value_type<const tvg::Element *, const CGPath *>, std::equal_to<const tvg::Element *>, std::hash<const tvg::Element *>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<const tvg::Gradient *, CGGradient *, std::hash<const tvg::Gradient *>, std::equal_to<const tvg::Gradient *>, std::allocator<std::pair<const tvg::Gradient *const, CGGradient *>>> {
    struct __hash_table<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, std::__unordered_map_hasher<const tvg::Gradient *, std::__hash_value_type<const tvg::Gradient *, CGGradient *>, std::hash<const tvg::Gradient *>, std::equal_to<const tvg::Gradient *>>, std::__unordered_map_equal<const tvg::Gradient *, std::__hash_value_type<const tvg::Gradient *, CGGradient *>, std::equal_to<const tvg::Gradient *>, std::hash<const tvg::Gradient *>>, std::allocator<std::__hash_value_type<const tvg::Gradient *, CGGradient *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<const tvg::Gradient *, CGGradient *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<const tvg::Gradient *, std::__hash_value_type<const tvg::Gradient *, CGGradient *>, std::hash<const tvg::Gradient *>, std::equal_to<const tvg::Gradient *>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<const tvg::Gradient *, std::__hash_value_type<const tvg::Gradient *, CGGradient *>, std::equal_to<const tvg::Gradient *>, std::hash<const tvg::Gradient *>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<tvg::Path *, const CGPath *, std::hash<tvg::Path *>, std::equal_to<tvg::Path *>, std::allocator<std::pair<tvg::Path *const, const CGPath *>>> {
    struct __hash_table<std::__hash_value_type<tvg::Path *, const CGPath *>, std::__unordered_map_hasher<tvg::Path *, std::__hash_value_type<tvg::Path *, const CGPath *>, std::hash<tvg::Path *>, std::equal_to<tvg::Path *>>, std::__unordered_map_equal<tvg::Path *, std::__hash_value_type<tvg::Path *, const CGPath *>, std::equal_to<tvg::Path *>, std::hash<tvg::Path *>>, std::allocator<std::__hash_value_type<tvg::Path *, const CGPath *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<tvg::Path *, const CGPath *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<tvg::Path *, const CGPath *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<tvg::Path *, const CGPath *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<tvg::Path *, const CGPath *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<tvg::Path *, const CGPath *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<tvg::Path *, std::__hash_value_type<tvg::Path *, const CGPath *>, std::hash<tvg::Path *>, std::equal_to<tvg::Path *>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<tvg::Path *, std::__hash_value_type<tvg::Path *, const CGPath *>, std::equal_to<tvg::Path *>, std::hash<tvg::Path *>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<id<MediaPlayerStatusListener>, std::allocator<id<MediaPlayerStatusListener>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__strong id<MediaPlayerStatusListener>*, std::allocator<id<MediaPlayerStatusListener>>> {
        id *__value_;
    } __end_cap_;
};

struct vector<tvg::RenderingState, std::allocator<tvg::RenderingState>> {
    struct RenderingState *__begin_;
    struct RenderingState *__end_;
    struct __compressed_pair<tvg::RenderingState *, std::allocator<tvg::RenderingState>> {
        struct RenderingState *__value_;
    } __end_cap_;
};

struct vector<unsigned char, std::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> {
        char *__value_;
    } __end_cap_;
};

struct weak_ptr<LHLS::CallbackLinkBase> {
    struct CallbackLinkBase *_field1;
    struct __shared_weak_count *_field2;
};

struct weak_ptr<LHLS::v1::PlaybackCallback> {
    struct PlaybackCallback *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct z_stream_s {
    char *next_in;
    unsigned int avail_in;
    unsigned long long total_in;
    char *next_out;
    unsigned int avail_out;
    unsigned long long total_out;
    char *msg;
    struct internal_state *state;
    CDUnknownFunctionPointerType zalloc;
    CDUnknownFunctionPointerType zfree;
    void *opaque;
    int data_type;
    unsigned long long adler;
    unsigned long long reserved;
};

#if 0
// Names with conflicting types:
typedef struct ?<std::basic_string<char>::__rep, std::allocator<char>> {
    struct __rep {
        CDUnion_fb1c1f9e ;
    } __value_;
} __compressed_pair_b5315e83;

typedef struct ?<std::basic_string<char>::__rep, std::allocator<char>> {
    struct __rep {
        CDUnion_fb1c1f9e _field1;
    } _field1;
} __compressed_pair_5d540195;

typedef struct ?<std::basic_string<char>::__rep, std::allocator<char>> {
    struct __rep {
        union {
            struct __short __s;
            struct __long __l;
            struct __raw __r;
        } ;
    } __value_;
} __compressed_pair_0f93271c;

typedef struct ?<char, std::char_traits<char>, std::allocator<char>> {
    __compressed_pair_b5315e83 __r_;
} basic_string_5909a4e2;

typedef struct ?<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            CDUnion_fb1c1f9e _field1;
        } _field1;
    } _field1;
} basic_string_1e6f3770;

typedef struct ?<char, std::char_traits<char>, std::allocator<char>> {
    __compressed_pair_0f93271c __r_;
} basic_string_0f0f2d4a;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    _Bool delegateSupportsDidEvictSelector;
    _Bool delegateSupportsCanEvictSelector;
} CDStruct_cc96487c;

typedef struct {
    unsigned int major;
    unsigned int minor;
    unsigned int bugfix;
} CDStruct_e24ffa00;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    _Bool _field3;
} CDStruct_f03de906;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
} CDStruct_14f26992;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
} CDStruct_4bcfbbae;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    void **_field1;
    int *_field2;
    char *_field3;
} CDStruct_e1a27b1c;

typedef struct {
    char *incrementalPath;
    char *compactedPath;
    unsigned int maxIncrementalCount;
    unsigned int maxCount;
} CDStruct_80f14726;

typedef struct {
    double playing;
    double paused;
    double waiting;
    double initialPreferredPeakBitrate;
    double minEngagementDuration;
    double engagedForwardBufferingPercent;
    double engagedMaxForwardBuffering;
} CDStruct_8151f15f;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
} CDStruct_8727d297;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct {
    long long version;
    void *info;
    CDUnknownFunctionPointerType retain;
    CDUnknownFunctionPointerType release;
    CDUnknownFunctionPointerType copyDescription;
} CDStruct_4210025a;

typedef struct {
    long long _field1;
    double _field2;
    long long _field3;
    long long _field4;
    long long _field5;
} CDStruct_a4b508bb;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct {
    long long _field1;
    long long _field2;
    long long _field3;
} CDStruct_2ec95fd7;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct {
    _Bool useSingleBackgroundForCaptions;
    struct UIEdgeInsets backgroundInsets;
    struct UIEdgeInsets frameInsets;
} CDStruct_c6c6d89b;

typedef struct {
    unsigned long long _field1;
    double _field2;
    double _field3;
    _Bool _field4;
    struct CGAffineTransform _field5;
    _Bool _field6;
    double _field7;
} CDStruct_168b635b;

typedef struct {
    char _field1[33];
    _Bool _field2;
    CDStruct_e24ffa00 _field3;
    CDStruct_e24ffa00 _field4;
    struct {
        _Atomic void *_field1;
        unsigned long long _field2;
        void *_field3;
        void *_field4;
        void *_field5;
    } _field5;
    struct FIRCLSMachOSlice _field6;
    long long _field7;
} CDStruct_1cdeb1cf;

typedef struct {
    double timestamp;
    struct CGPoint position;
} CDStruct_ff86b16f;

typedef struct {
    CDStruct_14f26992 _field1;
    CDStruct_14f26992 _field2;
} CDStruct_4c83c94d;

typedef struct {
    CDStruct_1b6d18a9 start;
    CDStruct_1b6d18a9 duration;
} CDStruct_e83c9415;

typedef struct {
    struct CGPoint _field1;
    struct CGAffineTransform _field2;
} CDStruct_562ed2e6;

typedef struct {
    struct os_unfair_lock_s lock;
    struct atomic_flag predicate;
} CDStruct_977e3b8b;

typedef struct {
    struct os_unfair_lock_s lock;
} CDStruct_762bc9ff;

typedef struct {
    struct CGRect _field1;
    struct CGRect _field2;
    struct CGRect _field3;
    struct CGRect _field4;
} CDStruct_60d9add8;

typedef struct {
    struct CGRect _field1;
    struct CGRect _field2;
} CDStruct_b7523c42;

// Ambiguous groups
typedef struct {
    unsigned int initialized:1;
    unsigned int failureEncountered:1;
} CDStruct_43a34ed1;

typedef struct CallbackDispatcher<LHLS::Network::RequestListener *> {
    struct weak_ptr<LHLS::CallbackLinkBase> _field1;
    struct RequestListener *_field2;
} CallbackDispatcher_03737a75;

typedef struct unique_ptr<LHLS::Network::Request, std::default_delete<LHLS::Network::Request>> {
    struct __compressed_pair<LHLS::Network::Request *, std::default_delete<LHLS::Network::Request>> {
        struct Request *_field1;
    } _field1;
} unique_ptr_b6b549da;

typedef struct unique_ptr<LHLS::v1::Network::Request, std::default_delete<LHLS::v1::Network::Request>> {
    struct __compressed_pair<LHLS::v1::Network::Request *, std::default_delete<LHLS::v1::Network::Request>> {
        struct Request *_field1;
    } _field1;
} unique_ptr_9bfed619;

#pragma mark Typedef'd Unions

typedef union {
    struct __long __l;
    struct __short __s;
    struct __raw __r;
} CDUnion_fb1c1f9e;

