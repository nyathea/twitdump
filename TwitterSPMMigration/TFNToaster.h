//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSDate, NSMutableArray, NSString, T1ToastBox, TFNToastViewController, TFSTimer, UINotificationFeedbackGenerator, UIViewController;
@protocol TFNScribeSink, TFNViewControllerVisibility><TFNToasterContextDelegate;

@interface TFNToaster : NSObject
{
    _Bool _isTimerFiring;
    id <TFNScribeSink> _scribeSink;
    UIViewController<TFNViewControllerVisibility><TFNToasterContextDelegate> *_contextDelegate;
    unsigned long long _state;
    NSMutableArray *_queue;
    T1ToastBox *_activeToastBox;
    TFSTimer *_timer;
    double _restoreTimeInterval;
    NSDate *_throttleNormalToastsUntilDate;
    TFNToastViewController *_toastViewController;
    UINotificationFeedbackGenerator *_notificationFeedbackGenerator;
}

+ (double)normalToastThrottleCooldownDuration;
+ (unsigned long long)normalToastQueueMaxCount;
+ (id)defaultToaster;
- (void).cxx_destruct;
@property(retain, nonatomic) UINotificationFeedbackGenerator *notificationFeedbackGenerator; // @synthesize notificationFeedbackGenerator=_notificationFeedbackGenerator;
@property(nonatomic) __weak TFNToastViewController *toastViewController; // @synthesize toastViewController=_toastViewController;
@property(retain, nonatomic) NSDate *throttleNormalToastsUntilDate; // @synthesize throttleNormalToastsUntilDate=_throttleNormalToastsUntilDate;
@property(nonatomic) double restoreTimeInterval; // @synthesize restoreTimeInterval=_restoreTimeInterval;
@property(nonatomic) _Bool isTimerFiring; // @synthesize isTimerFiring=_isTimerFiring;
@property(retain, nonatomic) TFSTimer *timer; // @synthesize timer=_timer;
@property(retain, nonatomic) T1ToastBox *activeToastBox; // @synthesize activeToastBox=_activeToastBox;
@property(retain, nonatomic) NSMutableArray *queue; // @synthesize queue=_queue;
@property(nonatomic) unsigned long long state; // @synthesize state=_state;
@property(nonatomic) __weak UIViewController<TFNViewControllerVisibility><TFNToasterContextDelegate> *contextDelegate; // @synthesize contextDelegate=_contextDelegate;
@property(retain, nonatomic) id <TFNScribeSink> scribeSink; // @synthesize scribeSink=_scribeSink;
- (unsigned long long)priorityForToast:(id)arg1;
- (id)toastQueue;
- (id)activeToast;
- (void)_tfn_scribeAction:(id)arg1 forToast:(id)arg2;
- (void)toastViewController:(id)arg1 didEndInteractingWithToast:(id)arg2;
- (void)toastViewController:(id)arg1 isInteractingWithToast:(id)arg2;
- (void)toastViewController:(id)arg1 didDismissToast:(id)arg2 withStyle:(unsigned long long)arg3 byGesture:(_Bool)arg4;
- (void)toastViewController:(id)arg1 willDismissToast:(id)arg2;
- (void)toastViewController:(id)arg1 didPresentToast:(id)arg2;
- (void)toastViewController:(id)arg1 willPresentToast:(id)arg2;
- (void)toastViewController:(id)arg1 didInvokeToastAction:(id)arg2 forToast:(id)arg3 actionView:(id)arg4;
- (void)viewControllerViewDidFullyDisappear:(id)arg1;
- (void)viewControllerViewDidFullyAppear:(id)arg1;
- (void)_tfn_callDismissCompletionHandlerIfNeededForToast:(id)arg1 fromGesture:(_Bool)arg2;
- (void)_tfn_applicationDidEnterBackground:(id)arg1;
- (void)_tfn_timerDidFinish;
- (void)_tfn_startToastTimerWithInterval:(double)arg1;
- (void)_tfn_dismissCurrentToastWithStyle:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_tfn_showNextToastWithStyle:(unsigned long long)arg1;
- (_Bool)_tfn_throttleNormalToastsIfNeeded;
- (_Bool)_tfn_isThrottlingNormalToasts;
- (id)_tfn_popToastBox;
- (void)_tfn_insertToastBoxIntoQueue:(id)arg1;
- (void)dequeueToastsPassingTest:(CDUnknownBlockType)arg1;
- (void)pushToast:(id)arg1 withPriority:(unsigned long long)arg2;
- (void)pushToast:(id)arg1;
- (void)registerToastViewController:(id)arg1;
- (void)resetToaster;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

